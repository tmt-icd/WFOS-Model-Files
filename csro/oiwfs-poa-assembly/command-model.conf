subsystem = WFOS
component = oiwfs.poa

description = "OIWFS POA Assembly Commands."

receive = [
   {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ]
      }
    ]
    requiredArgs = [ debug ]
  }
 
  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> POS_state.cmd = BUSY
<li> MODE_state.cmd = BUSY
<li> POS_state.move = false
<li> MODE_state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> POS_state.cmd = READY
<li> MODE_state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string
      }
    ]
  }

  {
    name = config
    description     = """Reads configuration files. (engineering)

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

This command does not otherwise alter the state of the assembly (i.e., unlike init, this command will not reset internal state variables).

*Discrete Command.*
    
Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
        {
            name        = configName 
            description = "Name of the configuration file to get from the TMT Configuration Service"
            type        = string
        }
        {
            name        = configVersion
            description = "Version of the configuration file to get from the TMT Configuration Service"
            type        = string 
        }
    ]
  }

  {
    name            = datum
    description     = """Datum the OIWFS POA stages and prepares the assembly for operation.
If any stage is currently moving then this command will internally trigger a stop if required. This command will then position the POA at the default (parked) position.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> POS_state.move = true
<li> MODE_state.move = true
<li> MODE_state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> POS_state.move = false
<li> MODE_state.move = false
<li> MODE_state.select = TT
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete or following command and stop all OIWFS POA stages.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> POS_state.move = false
<li> MODE_state.move = false
</ul>"""
  }

  {
    name            = park
    description     = """Park all the OIWFS POA stages by moving them to the safe maintenance/servicing positions.

This command will internally trigger a stop if required and then move all stage to park position as specified in the configuration file.


This command is intended to be used at the end of the night.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCDs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the OIWFS Component Controller server.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

  {
    name = MODE_init
    description     = """Prepares the MODE functional group for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> MODE_state.cmd = BUSY
<li> MODE_state.move = false
</ul>
At Completion:
<ul>
<li> MODE_state.cmd = READY
</ul>"""
  }

  {
    name = MODE_config
    description     = """Reads configuration files for MODE functional group. (engineering)

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

This command does not otherwise alter the state of the assembly (i.e., unlike init, this command will not reset internal state variables).

*Discrete Command.*
    
Precondition:
<ul>
<li> MODE_state.cmd = READY
</ul>
Execution:
<ul>
<li> MODE_state.cmd = BUSY
<li> MODE_state.move = false
</ul>
At Completion:
<ul>
<li> MODE_state.cmd = READY
</ul>"""
    args = [
        {
          name        = configName 
          description = "Name of the configuration file to get from the TMT Configuration Service"
          type        = string
        }
        {
          name        = configVersion
          description = "Version of the configuration file to get from the TMT Configuration Service"
          type        = string 
        }
    ]
  }

  {
    name            = MODE_datum
    description     = """Datum the MODE functional group stages and prepare for operation.
If any stage is currently moving then this command will internally trigger a MODE_stop if required. This command will then position the stages at the default position.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> MODE_state.move = true
<li> MODE_state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> MODE_state.move = false
<li> MODE_state.select = TT
</ul>"""
  }

  {
    name            = MODE_debug
    description     = """Change the MODE functional group debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ]
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = MODE_stop
    description     = """Cancel the current discrete command and stop all MODE functional group stages.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> MODE_state.move = false
</ul>"""
  }

  {
    name            = MODE_park
    description     = """Park all the MODE functional group stages by moving them to the safe maintenance/servicng positions.

This command will internally trigger a MODE_stop if required and then move all stage to park position as specified in the configuration file.

This command is intended to be used at the end of the night.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name = MODE_move
    description = """Move optical mode deployment stages to a specific angle and stop. (engineering)

This is an engineering command that moves each deployment stage to a particular angle.

The ttMoveFlag and ttfMoveFlag arrays indicate which probes are to be moved.

All optical deployment stages must be datumed, otherwise this command will fail.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> MODE_state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>
"""
    args = [
      {
        name          = ttAngle
        description   = "angle for the TT deployment stage for the four probes"
        type          = array
        dimensions: [4]
        units         = degrees
          items = {
            type        = double
          }
      }
      {
        name          = ttMoveFlag
        description   = "Flags indicating which TT deployment stages are to be moved"
        type          = array
        dimensions: [4]
        items = {
          type        = boolean
        }
      }
      {
        name          = ttfAngle
        description   = "angle for the TTF deployment stage for the four probes"
        type          = array
        dimensions: [4]
        units         = degrees
        items = {
            type        = double
        }
      }
      {
        name          = ttfMoveFlag
        description   = "Flags indicating which TTF deployment stages are to be moved"
        type          = array
        dimensions: [4]
        items = {
          type        = boolean
        }
      }
    ]
  }


  {
    name = MODE_select
    description = """Configure the full set of probe optical modes.

The optical mode of each probe may be configured independently to one of the following values:
<ul>
<li> <b>TT</b> mode inserts the Imaging Lens and retracts the Lenslet Array.
<li> <b>TTF</b> mode inserts the Lenslet Array and retracts the Imaging Lens.
<li> <b>OFF</b> mode retracts both lenses and parks associated probe.
<li> <b>NOOP</b> leave mode unchanged from its existing configuration.
</ul>

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> MODE_state.select = TT | TTF | OFF | NOOP
</ul>"""
    requiredArgs = [ probeType ]
    args = [
      {
        name = probeType
        description = "Optical mode of the four probes"
        type = array
        dimensions: [4]
        items = {
          enum = [TT, TTF, OFF, NOOP]
        }
      }
    ]
  }

  {
    name            = MODE_test
    description     = """Test the MODE functional group connections.  There is no movement. (engineering)

The assembly will reconnect to its HCDs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = POS_init
    description     = """Prepares the POS functional group for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> POS_state.cmd = BUSY
<li> POS_state.move = false
</ul>
At Completion:
<ul>
<li> POS_state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string
      }
    ]
  }

  {
    name            = POS_datum
    description     = """Datum the POS functional group and prepares the assembly for operation.

If any stage is currently moving then this command will internally trigger a stop if required. This command will then position the POA at the default (parked) position.

*Discrete Command.*

Precondition:
<ul>
<li> POS_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> POS_state.move = true
</ul>
At Completion:
<ul>
<li> POS_state.move = false
</ul>"""
  }

  {
    name            = POS_debug
    description     = """Change the POS functional group debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	<b>DEBUG</b>: extra details as messages are processed
<li>	<b>INFO</b> : connections and command status
<li>	<b>WARN(ing)</b> : unexpected events/messages/etc
<li>	<b>ERROR</b>: failed to do something
</ul>

*Friendly Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ]
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = POS_test
    description     = """Test the POS functional group connections.  There is no movement. (engineering)

The assembly will reconnect to its HCDs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name = POS_move
    description = """Move probes to the target X,Y position in FCRS<sub>WFOS-ROT</sub> coordinates and stop.

The moveFlag array indicates which probes are to be moved.

<em>
Discussion: This command is intended for debugging or calibrations. It will disable the follow mode for a particular probe if it was previously engaged (though any probe for which moveFlag is false will be ignored). Valid parameter ranges are a complex function of the full set of positions: target positions that would result in collisions will be rejected.
</em>

All stages related to probe positioning must be datumed, otherwise this command will fail.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> POS_state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>
"""
    requiredArgs = [moveFlag, moveCoords]
    args = [
      {
        name          = xy
        description   = "X,Y targets for the four probes"
        type          = array
        dimensions: [4,2]
        units         = mm
        items = {
          type        = double
        }
      }
      {
        name          = moveFlag
        description   = "Flags indicating which probes are to be moved"
        type          = array
        dimensions: [4]
        items = {
          type        = boolean
        }
      }
    ]
  }

  {
    name = POS_follow
    description = """Configure probe position following behaviour.

The following behaviour defines how the probes interpret natural guide star positions provided by the TCS (through the tcsOffset parameter).  An array of values (one per probe) is provided, with the following possible values:

<ul>
<li> <b>ON</b> activates following behaviour
<li> <b>OFF</b> de-activates following behaviour
<li> <b>NOOP</b> leaves the behaviour unchanged from its existing configuration.
</ul>

While following the assembly publishes the WFOS.oiwfs.active event stream to indicate which probes are currently active. Active probes will not be affected by probes that are moving to new targets, and probes that are moving to new targets will navigate around probes that are currently active. Until the first event is received, it is assumed that no probes are active.

Any static offsets specified by the POS_offset command are added to the continually varying positions from the TCS (e.g., to account for guide star catalog position errors).

If tcsOffset is unspecified, it implies NOOP (do not change the current behaviour).

The POA stages associated with probe motion must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> POS_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> POS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> POS_state.cmd = CONTINUOUS
</ul>

"""

    args = [
      {
        name = tcsFollow
        description = "Indicate if following TCS for each probe"
        type = array
        dimensions: [4]
        items = {
          enum = [ ON, OFF, NOOP ]
        }
      }
    ]
  }

  {
    name = POS_offset
    description = """Provide static x,y probe positional offsets w.r.t. TCS demands in FCRS<sub>WFOS-ROT</sub> coordinates.

Any static offsets specified by the POS_offset command are added to the continually varying positions from the TCS when the POS_follow command has been used to activate following (e.g., to account for guide star catalog position errors).

The offsetFlag array indicates which probes are to be offset by this command.

The POA stages associated with probe motion must be datumed otherwise this command will be rejected.

<em>
Discussion: This command is intended for debugging or calibration.
</em>

*Discrete Command.*

Precondition:
<ul>
<li> POS_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> POS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> POS_state.cmd = CONTINUOUS
</ul>

"""
    requiredArgs = [offsetFlag, xyOffset]
    args = [
      {
        name          = xyOffset
        description   = "X,Y offsets for the four probes"
        type          = array
        dimensions: [4,2]
        units         = mm
        items = {
          type        = double
        }
      }
      {
        name          = offsetFlag
        description   = "Flags indicating which probes are to be offset"
        type          = array
        dimensions: [4]
        items = {
          type        = boolean
        }
      }
    ]
  }

  {
    name = POS_oiwfsActive
    description = """Inform OIWFS which probes are active

Since probe positions can be commanded individually, it is important to know which are active, and which are not for the purposes of path planning. Probes that are inactive will always maneuver around active probes if commanded to move. Conversely, active probes will remain locked on their guide stars if an inactive probe passes near to them.

*Discrete Command.*

Precondition:
<ul>
<li> POS_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> POS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> POS_state.cmd = READY
<li> state.oiwfsActive = reflects commanded values
</ul>

"""
    requiredArgs      = [active]
    args = [
    {
        name          = active
        description   = "Active flags for the four OIWFS"
        type          = array
        dimensions: [4]
        items = {
          type        = boolean
        }
      }
    ]
  }

  {
    name = POS_filter
    description = """Activate and set parameters of a low-pass filter (e.g., Butterworth, TBD) to TCS demand streams when following.

When the active attribute is set for a given probe, a low-pass Butterworth filter is applied to TCS demands when following, parameterized by the order and cutoff frequency attributes.

This command can be sent with only the active attribute set in order to activate/de-activate previously configured filters.

*Discrete Command.*

Precondition:
<ul>
<li> POS_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> POS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> POS_state.cmd = CONTINUOUS
</ul>

"""
    requiredArgs = [active]
    args = [
      {
        name = active
        description = "Indicate which probes are to have filters applied"
        type = array
        dimensions: [4]
        items = {
          type = boolean
        }
      }
      {
        name = order
        description = "order of filters for the four probes"
        type = array
        minimum = 1
        dimensions: [4]
        items {
          type = integer
        }
      }
      {
        name = cutoff
        description = "cutoff frequencies of filters for the four probes"
        type = array
        minimum = 0
        units = Hz
        dimensions: [4]
        items {
          type = double
        }
      }
    ]
  }

  {
    name            = POS_stop
    description     = """Cancel the current POS functional group discrete or following command and stop all relevant stages.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> POS_state.move = false
</ul>"""
  }

  {
    name            = POS_park
    description     = """Park all the POS functional group stages by moving them to the safe maintenance/servicing positions.

This command will internally trigger a POS_stop if required and then move all stage to park position as specified in the configuration file.

This command is intended to be used at the end of the night.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = POS_recover
    description     = """Recover from a collision.

Using switch information published by the Galil IO HCD, rotate the probes involved in the collision until they are no longer in contact, and place them into a safe state for POS_datum command.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name = POS_trackingType
    description = """Configure the tracking/dithering type for each probe.

The POS_trackingType command will set the tracking/dithering type for the OIWFS probes at a specified future time. This command has no effect on any probe that has been set to OFF with the MODE_select command.

Each probe may be in one of the following tracking modes:

<ul>
<li> <b>TRACK_POA</b>: Tracking using POA
<li> <b>TRACK_ON_CHIP</b>: Tracking using on-chip sub window offset with POA locked
<li> <b>DITHER_POA</b>: Dithering using POA
<li> <b>DITHER_ON_CHIP</b>: Dithering using on-chip sub window offset with POA locked
<li> <b>NOOP</b>: Leave the trackingType unchanged from its previous value
</ul>

The difference between TRACK and DITHER is that no science exposure is happening during DITHER and therefore relaxed accuracy is allowed (i.e., different regions of the guide and acquisition table are used for detector readouts). This mode is only meaningful after executing the POS_follow command. The *_ON_CHIP variants indicate that the probes are stationary while the readout windows move, while the remaining variants involve motion of the probes.

An optional timestamp can be provided to specify when in the future the command should take effect.

The behaviour of any unspecified command argument will remain unchanged from its previously commanded behavior.

*Discrete Command.*

Precondition:
<ul>
<li> POS_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> POS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> POS_state.cmd = CONTINUOUS
</ul>

"""
    requiredArgs = [ trackingType ]
    args = [
      {
        name = trackingType
        description = "Tracking/dithering modes for the four probes"
        type = array
        dimensions: [4]
        items = {
          enum = [ TRACK_POA, TRACK_ON_CHIP, DITHER_POA, DITHER_ON_CHIP, NOOP ]
        }
      }      
      {
        name = timestamp
        description = "Time at which the command should take effect"
        type = taiDate
        units = "TAI / PTP"
      }
    ]
  }

]
